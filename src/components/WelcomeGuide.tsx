import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { CheckCircle, ArrowRight, Sparkles, Target, Brain, TrendingUp } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';

interface WelcomeGuideProps {
  isOpen: boolean;
  onClose: () => void;
  onFeatureSelect?: (feature: string) => void;
}

const WelcomeGuide: React.FC<WelcomeGuideProps> = ({ isOpen, onClose, onFeatureSelect }) => {
  const { t, currentLanguage } = useLanguage();
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      title: {
        en: "Welcome to SmartBudget AI!",
        hi: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü‡§¨‡§ú‡§ü AI ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!"
      },
      description: {
        en: "Your intelligent financial companion is here to help you manage money better",
        hi: "‡§Ü‡§™‡§ï‡§æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§æ‡§•‡•Ä ‡§Ü‡§™‡§ï‡•ã ‡§™‡•à‡§∏‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•à"
      },
      icon: <Sparkles className="h-12 w-12 text-yellow-500" />
    },
    {
      title: {
        en: "Track Your Expenses",
        hi: "‡§Ö‡§™‡§®‡•á ‡§ñ‡§∞‡•ç‡§ö ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç"
      },
      description: {
        en: "Add transactions with voice commands, scan bills, and categorize spending automatically",
        hi: "‡§Ü‡§µ‡§æ‡§ú ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≤‡•á‡§®‡§¶‡•á‡§® ‡§ú‡•ã‡§°‡§º‡•á‡§Ç, ‡§¨‡§ø‡§≤ ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡•É‡§§ ‡§ï‡§∞‡•á‡§Ç"
      },
      icon: <TrendingUp className="h-12 w-12 text-blue-500" />
    },
    {
      title: {
        en: "AI-Powered Insights",
        hi: "AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø"
      },
      description: {
        en: "Get personalized financial advice and spending patterns analysis from our AI coach",
        hi: "‡§π‡§Æ‡§æ‡§∞‡•á AI ‡§ï‡•ã‡§ö ‡§∏‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§î‡§∞ ‡§ñ‡§∞‡•ç‡§ö ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç"
      },
      icon: <Brain className="h-12 w-12 text-purple-500" />
    },
    {
      title: {
        en: "Achieve Your Goals",
        hi: "‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç"
      },
      description: {
        en: "Set savings goals, track budget progress, and get gamified rewards for good financial habits",
        hi: "‡§¨‡§ö‡§§ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç, ‡§¨‡§ú‡§ü ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§Ü‡§¶‡§§‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ó‡•á‡§Æ‡§ø‡§´‡§æ‡§á‡§° ‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç"
      },
      icon: <Target className="h-12 w-12 text-green-500" />
    }
  ];

  const features = [
    {
      key: 'add-expense',
      title: {
        en: "Add First Transaction",
        hi: "‡§™‡§π‡§≤‡§æ ‡§≤‡•á‡§®‡§¶‡•á‡§® ‡§ú‡•ã‡§°‡§º‡•á‡§Ç"
      },
      emoji: "üí∞"
    },
    {
      key: 'voice-entry',
      title: {
        en: "Try Voice Entry",
        hi: "‡§Ü‡§µ‡§æ‡§ú ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Ç"
      },
      emoji: "üé§"
    },
    {
      key: 'insights',
      title: {
        en: "View AI Insights",
        hi: "AI ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç"
      },
      emoji: "üß†"
    },
    {
      key: 'budget-planner',
      title: {
        en: "Plan Budget",
        hi: "‡§¨‡§ú‡§ü ‡§™‡•ç‡§≤‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç"
      },
      emoji: "üìä"
    }
  ];

  const getText = (textObj: { en: string; hi: string }) => {
    return textObj[currentLanguage as 'en' | 'hi'] || textObj.en;
  };

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleFeatureSelect = (featureKey: string) => {
    onFeatureSelect?.(featureKey);
    onClose();
  };

  const currentStepData = steps[currentStep];

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-center text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            {currentStep < steps.length ? getText(currentStepData.title) : (getText({ en: "Ready to Start?", hi: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞?" }))}
          </DialogTitle>
        </DialogHeader>

        {currentStep < steps.length ? (
          <div className="space-y-6 p-6">
            {/* Progress bar */}
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
              />
            </div>

            {/* Step content */}
            <div className="text-center space-y-4">
              <div className="flex justify-center mb-4">
                {currentStepData.icon}
              </div>
              <p className="text-lg text-gray-600 leading-relaxed">
                {getText(currentStepData.description)}
              </p>
            </div>

            {/* Navigation */}
            <div className="flex justify-between items-center pt-4">
              <Button 
                variant="outline" 
                onClick={prevStep}
                disabled={currentStep === 0}
                className="px-6"
              >
                ‚Üê {getText({ en: "Previous", hi: "‡§™‡§ø‡§õ‡§≤‡§æ" })}
              </Button>
              
              <span className="text-sm text-gray-500">
                {currentStep + 1} / {steps.length}
              </span>
              
              <Button 
                onClick={nextStep}
                className="px-6 bg-gradient-to-r from-blue-500 to-purple-500 hover:opacity-90"
              >
                {currentStep === steps.length - 1 
                  ? getText({ en: "Get Started", hi: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç" })
                  : getText({ en: "Next", hi: "‡§Ö‡§ó‡§≤‡§æ" })
                } ‚Üí
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-6 p-6">
            <div className="text-center space-y-4">
              <div className="flex justify-center mb-4">
                <CheckCircle className="h-16 w-16 text-green-500" />
              </div>
              <p className="text-lg text-gray-600">
                {getText({ 
                  en: "Choose a feature to start your financial journey!",
                  hi: "‡§Ö‡§™‡§®‡•Ä ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§´‡•Ä‡§ö‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç!" 
                })}
              </p>
            </div>

            {/* Feature selection */}
            <div className="grid grid-cols-2 gap-4">
              {features.map((feature) => (
                <Card 
                  key={feature.key}
                  className="cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-105 border-2 hover:border-blue-300"
                  onClick={() => handleFeatureSelect(feature.key)}
                >
                  <CardContent className="p-4 text-center space-y-2">
                    <div className="text-3xl">{feature.emoji}</div>
                    <h3 className="font-medium text-sm">
                      {getText(feature.title)}
                    </h3>
                  </CardContent>
                </Card>
              ))}
            </div>

            <div className="text-center">
              <Button 
                variant="outline" 
                onClick={onClose}
                className="px-8"
              >
                {getText({ en: "Explore Later", hi: "‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§è‡§ï‡•ç‡§∏‡§™‡•ç‡§≤‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç" })}
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default WelcomeGuide;